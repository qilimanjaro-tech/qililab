from inspect import signature
from typing import List, Tuple, Union

from qililab import __version__
from qililab.circuit import Circuit
from qililab.circuit.operations import R180, Measure, Operation, Reset, Rxy, Wait, X


class QiliQasmConverter:
    @staticmethod
    def circuit_to_qasm(circuit: Circuit):
        code = [f"// Generated by Qililab {__version__}"]
        code += ["// QILIQASM 1.0"]
        code += [f"Circuit {circuit.num_qubits}"]

        layers = circuit.get_operation_layers()
        for layer in layers:
            for operation_node in layer:
                name = operation_node.operation.name
                parameters = (
                    (f"{name}={value}" for name, value in operation_node.operation.parameters.items())
                    if operation_node.operation.has_parameters()
                    else None
                )
                operation = name if parameters is None else f"{name}({','.join(parameters)})"
                qubits = ",".join(f"{qubit}" for qubit in operation_node.qubits)
                code += [f"{operation} {qubits}"]

        return "\n".join(code)

    @staticmethod
    def qasm_to_circuit(code: str):
        operation_mapper = {"Rxy": Rxy, "R180": R180, "X": X, "Measure": Measure, "Wait": Wait, "Reset": Reset}
        num_qubits = 0
        operations: List[Tuple[Union[int, Tuple[int, ...]], Operation]] = []
        lines = code.split("\n")
        for line in lines:
            if line.startswith("//"):
                continue
            operation, str_qubits = line.split(None, 1)
            if operation == "Circuit":
                num_qubits = int(str_qubits)
            else:
                qubits = tuple(int(qubit) for qubit in str_qubits.split(","))
                parenthesis = operation.find("(")
                if parenthesis == -1:
                    operations.append((qubits, operation_mapper[operation]()))
                else:
                    argument_pairs = operation[parenthesis + 1 : -1].split(",")
                    operation = operation[:parenthesis]
                    sig = signature(operation_mapper[operation])
                    parameters = {}
                    for pair in argument_pairs:
                        name, value = tuple(pair.split("="))
                        value = sig.parameters.get(name).annotation(value)
                        parameters[name] = value
                    operations.append((qubits, operation_mapper[operation](**parameters)))
        circuit = Circuit(num_qubits)
        for q, op in operations:
            circuit.add(q, op)
        return circuit
