@startuml

participant Experiment as exp
participant Loop as loop_
participant Instrument as instr
participant Platform as plat
participant Schema as schema
participant Instruments as instrs
participant Chip as chip
participant PlatformSettings as platset
participant DDBBElement as DDBB
participant GateSettings as gateset
participant Node as node

[-> exp: update_parameters_from_loops_filtering_external_parameters (values, loops)
activate exp
exp -> exp: filter_loops_values_with_external_parameters (values, loops)
activate exp #7F1CDB
note right of exp: filtered_loops = loops
note right of exp: filtered_values = values
loop idx, loop in filtered_loops
        exp -> exp: filter_loop_value_when_parameters_is_external (filtered_loops, filtered_values, idx, loop)
        activate exp #E6033F
        exp -> loop_ ++: get_parameter ()
        return parameter
        opt parameter == external
                note right of exp: filtered_loops.pop (idx)
                note right of exp: filtered_values.pop (idx)
        end
        return filtered_loops, filtered_values
end
return filtered_loops, filtered_values
exp -> exp: update_parameters_from_loops (filtered_values, filtered_loops)
activate exp #7F1CDB
exp -> exp: get_platform_elements_from_loops (filtered_loops)
activate exp #E6033F
loop loop in filtered_loops
        exp -> exp: get_platform_element_from_one_loop (loop)
        activate exp #3B23FF
        exp -> loop_ ++: get_alias ()
        return alias
        exp -> loop_ ++: get_instrument_category ()
        loop_ -> instr ++: get_category ()
        return category
        return category
        exp -> loop_ ++: get_id ()
        return id
        exp -> plat ++: get_element (alias, category, id)
        note right of plat #C2A5DC: Platform get_element
        return result
        return result
        note right of exp: results.append (result)
end
return results
note right of exp: elements = results
loop value, loop, element in zip (values, loops, elements)
        exp -> exp: update_parameter_from_loop (value, loop, element)
        activate exp #E6033F
        exp -> loop_ ++: get_alias ()
        return alias
        exp -> loop_ ++: get_instrument ()
        return instrument
        exp -> loop_ ++: get_id () 
        return id
        exp -> loop_ ++: get_parameter ()
        return parameter
        exp -> exp: set_parameter (element, alias, instrument, id, parameter, value)
        activate exp #3B23FF
        alt instrument is not None
                exp -> instr ++: get_category ()
                return result
                note right of exp: category = result
        else
                note right of exp: category = None
        end

        alt element is None
                exp -> plat ++: set_parameter (alias, category, id, parameter, value)
                note right of plat #C2A5DC: Platform set_parameter
                return
        else element is a PlatformSettings
                exp -> platset ++: set_parameter (alias, parameter, value)
                note right of platset #C2A5DC: PlatformSettings set_parameter
                return
        else element is a Node
                exp -> node ++: set_parameter (parameter, value)
                note right of node #C2A5DC: Node set_parameter
                return
        else element is an Instrument
                exp -> instr ++: set_parameter (parameter, value)
                note right of instr #C2A5DC: Instrument set_parameter
                return
        end
        opt category = Platform OR alias is a platform alias
                exp -> exp: build_execution (initial_sequences)
                activate exp #7F1CDB
                note right of exp #C2A5DC: Experiment build_execution
                return
        end
        return
        return
end
return
[<-- exp
                        


@enduml