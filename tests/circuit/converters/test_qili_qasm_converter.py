import pytest

from qililab import __version__
from qililab.circuit import Circuit
from qililab.circuit.converters import QiliQasmConverter
from qililab.circuit.operations import Measure, Wait, X


@pytest.fixture(name="simple_circuit")
def fixture_simple_circuit() -> Circuit:
    """Return a simple circuit."""
    circuit = Circuit(2)
    circuit.add(0, X())
    circuit.add(0, Wait(t=100))
    circuit.add(0, X())
    circuit.add(1, X())
    circuit.add((0, 1), Measure())
    return circuit


@pytest.fixture(name="simple_circuit_qasm")
def fixture_simple_circuit_qasm() -> str:
    """Return the QiliQasm representation of the simple circuit"""
    code = [f"// Generated by Qililab {__version__}"]
    code += ["// QILIQASM 1.0"]
    code += ["Circuit 2"]
    code += ["0 X"]
    code += ["1 X"]
    code += ["0 Wait(t=100)"]
    code += ["0 X"]
    code += ["0,1 Measure"]
    return "\n".join(code)


class TestQiliQasmConverter:
    """Unit tests checking the QiliQasmConverter methods"""

    def test_to_qasm_method(self, simple_circuit: Circuit, simple_circuit_qasm: str):
        converter = QiliQasmConverter()
        qasm = converter.to_qasm(simple_circuit)
        assert isinstance(qasm, str)
        assert qasm == simple_circuit_qasm

    def test_from_qasm_method(self, simple_circuit: Circuit, simple_circuit_qasm: str):
        converter = QiliQasmConverter()
        circuit = converter.from_qasm(simple_circuit_qasm)
        assert isinstance(circuit, Circuit)
        assert circuit.num_qubits == simple_circuit.num_qubits
        assert circuit.graph.num_nodes() == simple_circuit.graph.num_nodes()
