@startuml

participant Chip as chip

[-> chip ++: get_port_from_qubit_idx (idx, readout)
chip -> chip: find_qubit (idx)
activate chip #7F1CDB
loop node in self.nodes
    opt isinstance(node, Qubit) AND node.qubit_idx = idx
        return qubit
        note right of chip: break
    end
end

alt not readout
    chip -> chip: get_adjacent_port (qubit)
    activate chip #7F1CDB
    chip -> chip: get_adjacent_nodes (qubit)
    activate chip #E6033F
    note right of chip: adj_nodes = []
    loop node_id in qubit.nodes
        chip -> chip: get_node_from_id (node_id)
        activate chip #3B23FF
        loop node in self.nodes
            opt node.id = node_id
                return node
                note right of chip: break
            end
        end
        note right of chip: adj_nodes.append(node)
    end
    return adj_nodes

    loop adj_node in adj_nodes
        opt isinnstance (adj_node, Port)
            return port
            note right of chip: break
        end
    end 
    note right of chip: result = port
else readout
    chip -> chip: get_adjacent_nodes (qubit)
    activate chip #7F1CDB
    note right of chip: adj_nodes = []
    loop node_id in qubit.nodes
        chip -> chip: get_node_from_id (node_id)
        activate chip #E6033F
        loop node in self.nodes
            opt node.id = node_id
                return node
                note right of chip: break
            end
        end
        note right of chip: adj_nodes.append(node)
    end
    return adj_nodes

    loop node in adj_nodes
        opt isinstance (node, Resonator)
            chip -> chip: get_adjacent_port (node)
            activate chip #7F1CDB
            chip -> chip: get_adjacent_nodes (node)
            activate chip #E6033F
            note right of chip: adj_nodes = []
            loop node_id in node.nodes
                chip -> chip: get_node_from_id (node_id)
                activate chip #3B23FF
                loop node in self.nodes
                    opt node.id = node_id
                        return node
                        note right of chip: break
                    end
                end
                note right of chip: adj_nodes.append(node)
            end
            return adj_nodes

            loop adj_node in adj_nodes
                opt isinnstance (adj_node, Port)
                    return port
                    note right of chip: break
                end
            end 
        end
    end
    note right of chip: result = port
end 

return result

@enduml