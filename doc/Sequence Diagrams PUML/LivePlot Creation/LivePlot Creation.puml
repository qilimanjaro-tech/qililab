@startuml
participant LivePlot as liveplot
collections numpy as np
participant RemoteAPI as remote_api
participant API as api

[-> liveplot **: LivePlot(remote_api, loops, plot_y_label, num_sequences)
activate liveplot
liveplot -> liveplot: build_plot_ranges_from_loop_ranges (num_sequences)
activate liveplot #7F1CDB
alt self.loops is None
      liveplot -> liveplot: self.build_empty_iterator ()
      activate liveplot #E6033F
      return empty_it_1
      liveplot -> liveplot: self.build_empty_iterator ()
      activate liveplot #E6033F
      return empty_it_2
      note right of liveplot: result1 = (empty_it_1, empty_it_2)
else
      liveplot -> liveplot: build_plot_ranges_from_defined_loop_ranges (num_sequences)
      activate liveplot #E6033F
      liveplot -> liveplot: find_minimum_outer_range_from_loops (loops)
      activate liveplot #3B23FF
      return min_outer_range
      liveplot -> np ++: tile (min_outer_range, num_sequences)
      return x_loop_range
      liveplot -> liveplot: find_minimum_inner_range_from_loops (loops)
      activate liveplot #3B23FF
      return min_inner_range
      liveplot -> np ++: tile (min_inner_range, num_sequences)
      return y_loop_range
      alt y_loop_range is None OR len(y_loop_range) <= 0
            liveplot -> liveplot: self.build_empty_iterator ()
            activate liveplot #3B23FF
            return empty_it_3
            note right of liveplot: result2 = (iter(x_loop_range), empty_it_3)
      else
            liveplot -> np ++: meshgrid (x_loop_range, y_loop_range)
            return ranges_meshgrid
            liveplot -> np ++: ranges_meshgrid[0].ravel()
            return aux_vec_x
            liveplot -> np ++: ranges_meshgrid[1].ravel()
            return aux_vec_y
            note right of liveplot: result2 = (aux_vec_x, aux_vec_y)
      end
      return result2
      note right of liveplot: result1 = result2           
end
return result1
note right of liveplot: self.x_iterator_ranges, self.y_iterator_ranges = result1
liveplot -> liveplot: create_live_plot (title)
activate liveplot #7F1CDB
liveplot -> remote_api ++: create_liveplot (title, x_label, y_label, z_label, plot_type, x_axis, y_axis)
remote_api -> api ++: create_liveplot (title, x_label, y_label, z_label, plot_type, x_axis, y_axis)
return plot_id
return plot_id
return plot_id
note right of liveplot: self.plot_id = plot_id
[<-- liveplot: plot
@enduml